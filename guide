카프카(Kafka)를 설치(Install)해보자

카프카를 설치하는 환경은 Virtualbox를 통해 Centos7에 설치
 -Centos7에 OpenJDK1.8 
 
 
 2. 설치전 작업 (root)
 
vi /etc/hosts
0.0.0.0 kafka1  

## 주키퍼 포트 
 firewall-cmd --permanent --zone=public --add-port=2181/tcp
 firewall-cmd --permanent --zone=public --add-port=2888/tcp
 firewall-cmd --permanent --zone=public --add-port=3888/tcp

## 카프카 포트
 firewall-cmd --permanent --zone=public --add-port=9092/tcp

## 방화벽 재시작 
 firewall-cmd --reload

3. 주기퍼(Zookeeper) 설치 http://apache.tt.co.kr/zookeeper/stable/

tar zxf zookeeper-3.4.12.tar.gz 
ln -s zookeeper-3.4.12 zookeeper

mkdir data
echo 1 > data/myid  

cd zookeeper/conf
cp zoo_sample.cfg zoo.cfg
vi zoo.cfg

[kafka@oframe conf]$ cat zoo.cfg 
# The number of milliseconds of each tick
tickTime=2000
# The number of ticks that the initial 
# synchronization phase can take
initLimit=10
# The number of ticks that can pass between 
# sending a request and getting an acknowledgement
syncLimit=5
# the directory where the snapshot is stored.
# do not use /tmp for storage, /tmp here is just 
# example sakes.
dataDir=/tmp/zookeeper
# the port at which the clients will connect
clientPort=2181
# the maximum number of client connections.
# increase this if you need to handle more clients
#maxClientCnxns=60
#
# Be sure to read the maintenance section of the 
# administrator guide before turning on autopurge.
#
# http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance
#
# The number of snapshots to retain in dataDir
#autopurge.snapRetainCount=3
# Purge task interval in hours
# Set to "0" to disable auto purge feature
#autopurge.purgeInterval=1
server.1=kafka1:2888:3888



####이제 실행시켜보자.

./zookeeper/bin/zkServer.sh start
정상적이라면 아래처럼 메시지가 출력된다.

ZooKeeper JMX enabled by default
Using config: /home/kafka/zookeeper/bin/../conf/zoo.cfg
Starting zookeeper ... STARTED


*FAILED가 나오면 apache-zookeeper-3.5.8-bin.tar.gz 으로 다시 설치를 한다.

###이제 정지시켜보자
./zookeeper/bin/zkServer.sh stop

다음처럼 Alias를 걸어서 기동을 시켜보자
# ZOOKEEPER ENV
export ZOO_HOME=/home/kafka/apache-zookeeper-3.5.8-bin/
PATH="/home/kafka/apache-zookeeper-3.5.8-bin/bin:/home/kafka/apache-zookeeper-3.5.8-bin/lib:${PATH}"
export PATH
alias zooboot='zkServer.sh start'
alias zoodown='zkServer.sh stop'


4. 카프카(Kafka) 설치 https://kafka.apache.org/downloads

mkdir data1

vi kafka/config/server.properties

변경해야하는 내용 

# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# see kafka.server.KafkaConfig for additional details and defaults

############################# Server Basics #############################

# The id of the broker. This must be set to a unique integer for each broker.
broker.id=1

############################# Socket Server Settings #############################

# The address the socket server listens on. It will get the value returned from 
# java.net.InetAddress.getCanonicalHostName() if not configured.
#   FORMAT:
#     listeners = listener_name://host_name:port
#   EXAMPLE:
#     listeners = PLAINTEXT://your.host.name:9092
listeners=PLAINTEXT://oframe:9093


############################# Log Basics #############################

# A comma separated list of directories under which to store log files
log.dirs=/home/kafka/data1,/home/kafka/data2

# Zookeeper connection string (see zookeeper docs for details).
# This is a comma separated host:port pairs, each corresponding to a zk
# server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".
# You can also append an optional chroot string to the urls to specify the
# root directory for all kafka znodes.
#zookeeper.connect=localhost:2181/kafka-oframe
zookeeper.connect=kafka1:2181


5. Kafka 기동 

./kafka/bin/kafka-server.start.sh home/kafka/kafka/config/server.properties
[KafkaServer id=1] started (kafka.server.KafkaServer)

# KAFKA ENV
export KAFKA_HOME=/home/kafka/kafka/
PATH="/home/kafka/kafka//libs:/home/kafka/kafka/bin:${PATH}"
export PATH
alias kafboot='kafka-server-start.sh /home/kafka/kafka/config/server.1.properties'
alias kafdown='kafka-server-stop.sh'


6. Kafka 동작 확인

TOPIC CREATE
[kafka@oframe bin]$ sh kafka-topics.sh --zookeeper kafka1:2181 --replication-factor 1 --partitions 1 --topic oframe-kafka --create
Created topic oframe-kafka.


7. TOPIC에 MESSGE 넣기
[kafka@oframe bin]$ kafka-console-producer.sh --broker-list kafka1:9092 --topic oframe-kafka
>Hello Oframe    
>

8. TOPIC에 MESSGE 받기
[kafka@oframe bin]$ kafka-console-consumer.sh --bootstrap-server kafka1:9092 --topic oframe-kafka --from-beginning
Hello Oframe


9. 파이썬으로 넣고 받기

받기 
[kafka@oframe KAFKA]$ vi get.py 

from kafka import KafkaConsumer
consumer = KafkaConsumer('sample1')      <===Topic 이름
for message in consumer:
    end = message.value
    print (end)
                  

넣기
[kafka@oframe KAFKA]$ vi put.py 
from kafka import KafkaProducer
try:
    producer = KafkaProducer(bootstrap_servers='kafka1:9092')
except:
    print ('Connection Fail')


def putmsg_kaf(producer):
    try :
        producer.send('sample1', 'JACOB, World!')
        print('Message published successfully.')
        producer.flush()
    except:
         print('Exception in publishing message')

putmsg_kaf(producer)
